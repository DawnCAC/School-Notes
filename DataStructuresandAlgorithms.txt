Notes with Teacher

* Watch for the welcome email
* Make a reading plan for the 16 sections
* This looks to be in python
* Average is 4 or 5 weeks for this course
* Send an email to teacher if there is something I really do not understand
* Use the study guide to help with knowing what to study.
* Watch course chatter for any student notes on this class.
* The class reviews structures and the commands to come with them

Course Plan
___________
Section 1: Getting started
	1.1-1.5: 7/13/21
Section 2: Introduction to Python 3
	2.1-2.6: 7/14/21 - 7/15/21
	2.7-2.12: 7/15/21 - 7/16/21
Section 3: ADTs and Algorithms
	3.1-3.7: 7/17/21
Section 4: Types, Variables, & Expressions
	4.1-4.5: 7/18/21-7/19/21
	4.6-4.10: 7/20/21
Section 5: Branches and Loops
	5.1-5.5: 7/21/21-7/22/21
	5.6-5.10: 7/23/21-7/24/21
After I finish this section look at my planning and plan out the rest.
Section 6: Functions
Section 7: Classes
Section 8: Lists and Dictionaries
Section 9: Recursion
Section 10: Algorithm Analysis
Section 11: Searching and Sorting Algorithms
Section 12: Lists, Stacks, and Queues
Section 13: Hash Tables
Section 14: Trees
Section 15: Heaps
Section 16: Final Steps

Live EVENT 7/18/21: Implementation of Stack ADT Based Upon a Python List
	* IDE: Integrated Developement Environment
	* Stack is an abstract data type
		- Lists in python are used to make a stack
		- Alter and transfore the lists operations
	* Operations for a stack: Push and pop
	* Last one in the stack is the first item out.
	* Push puts an item on the stack as long as the stack is not full, it amends it to the list
	* Pop removes an item from the stack as long as the stack is not empty, will take the item out of the list
	* Stacks full and empty is defined at the type of the program
	* Peek lets you look at the top item in the stack
	* Object oriented stack
		- The init sents all of the values for a stack
		- def __init__(self, size = 10):
			self.S_Size = size
			self.S_Empty = 0
			self.S = ()
		- getCapacity will let you know how big the stack currently is.
	* Abstract data type can be any type of real world object that is being modeled.  These types are showing real world data types.
	* Need to make sure I can really understand the data algorithms and algorithms because it will help really know how to program.  Learn as much as I can.
	* Taxominy: 
	* I have python installed and go to the course in the lists, stacks, and queues, understand python stacks and queues.  Copy the implementation into python and play with it.
	* I may want to pull all the python code as I go and try to play with it and see how it works.
	* Breaking things is not a bad thing it will help learn.

Chapter 1: Getting Started
  1.1
	* Covers fundamentals of dynamic data structures
	* Python software is the bases
	* Covers object-oriented design and abstract data types as a design paradigm
  1.2
	* Python Code Commenting Style Requirements
	* For inline comments use # and a space, then add your comment 
	* # and a space can be used for multi-line comments by putting them at the front of each line
	* Last is using 3 quote marks “”” on each side of the quote.  These are usually for describing what a piece of code does.
	* Use a style guide to help guide your code style


  1.4
  Pacing guide
	Week 1: Chapters 2-4
	Week 2: Chapters 5-7
	Week 3: Chapters 8-10
	Week 4: Chapters 11 & 12
	Week 5: Chapters 13-15
	Week 6: Pre assessment, study, and Objective assessment
  Look at this for figuring out my chapters.

1.5 Learning Objectives Content Map (Coaching Guide)
	Use this to make sure I know everything on here



Chapter 2: Introduction to Python 3
  2.1 Programming Introduction
	* Computer Program consists of instructions that a computer executes like instructions used to execute a recipe
  2.2 Computational Thinking
	* Task Decomposition means to reduce the complex task into simpler basic steps to make everything easier to solve.
	* Computational thinking: creating an algorithm to solve a problem by evaluating the problems most basic parts
  2.3 The Python Interactive Interpreter
	* Interactive Interpreter: Program that allows the user to execute one line of code at a time.
		- Code is a common word for textual representation of a program
		- Line is a row of text
		- Prompt is displayed and indicates the interpreter is ready to accept code.  In python it is >>> for the prompt
  2.4 Programming in Python
	* Programmer can write a python code file and provide the file to the interpreter.  This allows the program to not have to be typed in line by line each time.
		- Statement: Program instruction
		- Expressions: code that return a value when evealuated
		- Print(): displays variables or expression values
		- '#' denotes comments
  2.5 Basic Output
	* Primary way to print an output is using print()
	* End= : keeps the next print's output on the same line separated by a single space
	* Using commas between items to print will print them in a line seperated by spaces Example: wage = 20 Print ('Wage:',wage) = Wage: 20
	* \n is a newline character.  It will seperate out things into seperate lines
	* 
  2.6 Basic Input
	* input() is used for a user to enter a value.  input waits for the user to insert something and hit enter key
	* inputs are strings normally
	* sting and integer values are considered types
  2.7 Errors
	* Syntax error: violate a programming language's rules on how symbols can be combined to create a program
		- Error message will include the line around where the error is
	* It is good practice to write a little bit of code at a time and run it.  This will help lessen the number of stacking errors
	* Runtime error: program's sytax maybe correct but not all the coding maybe correct.  This may crash your program.
	* Logix error: when the program has errors that will not crash the program but make the program not behave like it is suppose too.  Often called a bug.
  2.9 Development Environment
	* IDE: Integrated Development Environment is used to develope code
	* Python can be written in notepad as well.  You do not need an IDE for python
  2.10 Computers and Programs
	* Memory stores 0s and 1s or bits
	* Program/Application/App: sequence of instructions that are designed by a programmer
	* Program instructions written in 0s and 1s is machine instructions or machine code
	* Assemblers are what translates human readable instructions into machine code
  2.11 Computer Tour
	* Computer was originally a person who did computations by hand from there it has advanced into tech that is called computers which include large computers
	   and as small as a smart phone
	* Parts of a computer: Input/output devices (screen/keyboard/mouse), Storage, Memory, Processor, clock
	* Computers can now run multiple programs at a time
  2.12 Language History
	* Machine Language: made up of 0s and 1s and is the executable program with machine instructions
	* Assembly Language: assemplers translate human readable instructions to machine language
	* High-level languages: support programming using algorithms and formulas.  More closely related to how people think.  Need compilers
	* Scripting language: executes programs without a compiler, they use an interpreter instead

Chapter 3: ADTs and Algorithms
  3.1 Introduction to Algorithms
	* Algorithm: Describes a sequence of steps to do a calculation.
	* Computational Problem: Input, question about input, and desired output
	* Algorithm can be in english, pseudocode, programming language, etc.  The algorithm just has to precisely describe the computational procedure.
	* NP-complete: problems for which no know efficient algorthm exists.  For this programmers need to focus on finding a good enough algorithm
  3.2 Data Structures
	* Data Structures: way of organizing and storing data.  It also makes it so operations can be performed on the data
		- Record: stores subitems with an name for each
		- Array: stores an ordered list of items.  Accessible by positional index
		- Linked list: stores ordered list of items using nodes.  Has a pointer for the next node
		- Binary tree: each node stores data and has up to 2 children, similar to a family tree
		- Hash table: sotres unordered items by mapping the location in an array
		- Heap: tree that maintains simple property that the node key is either greater thank or less than/equal to the node's childrens' keys.
		    Either max-heap or min-heap
		- Graph: representing connections among items.  vertex: item on graph.  Edge: connection between 2 vertices
	* An array has to be shifted to add a new item while a linked list can add an item by updating the pointers
  3.3 Relation Between Data Structures and Algorithms
	* Review the Programing part of this section
  3.4 Abstract Data Types
	* Abstract data types (ADTs): predefined user operations
	* Different underlying structures will require different algorithms be performed.
	* Common Abstract data types: list, stack, queue, deque, bag, set, priority queue, dictionary(map)
  3.5 List Abstract Data Type (ADT)
	* List: holding ordered data
  3.6 Queue Abstract Data Type (ADT)
	* Queue: items are inserted at the end and remove from the front.  First in first out.
	* Pop: Removes and returns the item in the from of the queue
  3.7 Applications of ADTs
	* Abstract: have users interact at a high level with an items but internal details are hidden.
	* Underlying implemention needs to be known to make sure that the runtime is efficient
	* ADTs in standard libraries: Python (list, set, dict, deque), C++ (vector, list, deque, queue, stack, set, map), Java (Collection, set, list, map, queue, deque)
	* 

Chapter 4: Types, Variables, & Expressions
  4.1 Objects and Variables
	* An interpreter creates and manipulates objects as needed.
	* Variable is used to remember a value for later use and is deleted after use
  4.2 Assignments
	* Variable name is what a programmer calls a variable.
	* Assignment statement: assigns the name on the left and the value associated with that name on the right
	* Name = expression (which can just be one item or it can be a calculation)
	* Names can be reassigned to another object, they are not perminate
	* In programming = means compute the value on the right and assign it to the left
  4.3 More on Objects
	* Python objects include: value, type (like integer or string), and identity (unique identifier that describes the object)
	* Objects that are integers can be added or multipled but strings can not be.  Strings can be appended with additional text.  This is because type matters to a
	   values behavior
	* type() prints the type of object
  4.4 Names
 	* Name is also called the identifier
		- Sequence of letters and numbers and underscore.
		- Must always start with a letter and an underscore is considered a letter in this case
		- Double underscores should be avoided because python has special usages for this
	* Python is case sensitive
	* Reserved words, or key words, can not be used as names because they are part of the coding language
	* Good practice is to use all lowercase when naming and use Underscores between words
	* Names should be meaningful and have something to do with what it is being used for.  Like num_cars for the number of cars in the lot, etc
	* While meaningful, names should not be particularly long either.
  4.5 Numeric Types: Floating-Point
	* Floating points are a type of decimal/fraction
	* When needing things to be floating points a decimal has to be used in the programing
	* Floating point literal using scientific notation using e before the exponent so those calculations can be used.
	* overflow error happens when the value is too large to be stored into memory.  Max: 1.8x10e308 and min: 2.3x10e-308.
	* floating points are usually used for values that are measured such a volume or temp
  4.6 Expressions
	* Expression: combination of items for example variables and operators that evaluates to a value
	* Literal: specific value in the code
	* Expressions can be just a literal or variable or any compination of those and operators, just with no commas
	* Operator: symbol to use for calculation.  Like + for addition
	* Expressions must follow arithmetic rules
	* Can not ommit operators like you can in math.  For example in math 5k is 5*k but in programming 5k is just 5k, if you want to multiple you have to have the *.
	* No factoial operator exists in python
	* // is used to divide if you do not want a floating point.  The remainder is just dropped instead of added as a decimal
	* % or modulo is used to return just the remainder of a division
	* If either value is a float then the result will be a float.  Division always returns a float
  4.7 String Basics
	* String: sequence of characters.  Like someones name
	* String literal: string value specified in the source code.  Do so my suround the string with quotes single or double
	* Sequence type: type that specifies a collection of objects ordered from left to right.
	* Index: position of a character in the string
	* len() is used to find the length of a string
	* Use [index # you want] to access specific indexes
	* Strings once made can not be modified.  To change the string you have to assign the string again with the modifications already changed
	* 
  4.8 Lists Basics
	* Containers: contain references to other objects
	* List: is a type of container. Use brackets to suround the sequence of variables
	* List item is called an element
	* Lists are ordered by the position in the list, they have an index #
	* Lists can help reduce variables in a program
	* Lists index must be an integer but can be negative
	* Lists can be modified as needed by the programmer by using append() or pop() or remove()
	* Sequence-type functions perform operations on lists and strings
	* Tuple is an imuutable list.  It can not be modified once produced.  Uses () instead of []
  4.9 Dictionary Basics
	* Dictionary: is a container that describes associative relationships
	* Key: is like the word cat from the english dictionary
	* Value: describes some data associated with the key
	* The object type is dict. and it is created by using braces {} the dictionary
	* Multiple entries can be maded into the dictionary {entry 1: value, entry 2: value, etc}
	* Dictionaries are used if you need to associate a key to a value in a list.  like a students name with their grade
	* Dictionaries do not maintain an order and can be changed as necessary
	* Insert by dict[key] = value, use the same thing to update as well, use the same key but add a different value.
	* del dict[key of entry to be deleted]
	* KeyError occurs if the key does not exist
  4.10 Common Data Types Summary
	* Numeric types: int and float
	* Sequence types: string, list, and tuple
	* Mapping type: dictionary

Chapter 5: Branches and Loops
  5.1 If-Else Statement
	* If-else statements use branching to have the program execute either one group of statements or another
	* I am already ok at if-else statements, did not take much notes here
  5.2 Relational and Equality Operators
	* Relational Operators: are like less than or greater than
	* Equality Operators: are like equal to and not equal to
	* Each evaluates to a boolean which is true or false
	* Operator chaining is supported in python.  Chaining performs comparisons from left to right.
	* Numbers are arithmetically compared.  Strings are compared by converting to ASCII
  5.3 Multiple if-else
	* Else if is used if you need to run multiple if else statements
	* It is good practice to use for example <= instead of just less than
  5.4 Boolean Operators and Expressions
	* Boolean refers to a value that is true or false
	* Boolean operator can combine multiple expressions
	* Expression using boolean operators is known as a boolean expression
	* boolean operators: and, or, not
	* Use parentheses to make sure the order of operations is inacted correctly
	* Relational operators such as == compute before logical operations like not
  5.5 Membership Operators
	* in and not in help to see if a specific value in found in a container.  It produces a true false responce
	* Membership operators do not check each dictionary keys values
	* is checks whether 2 operands are bound to a single object
	* identity operator: determine whether 2 variables are the same object.  Uses is and is not
	* Best practice is to not use identity operators enless absolutely needed
  5.6 Code Blocks and Indentation
	* Code Block: series of statements that are grouped together
	* Code Blocks are indented after the first line to show that all those lines go together in the block
	* This is kinda like how my notes are setup with the indentions.
	* Standard indention is 4 spaces/columns per level of indention.  DO NOT USE TAB!
	* Code that is so long that is has to wrap lines and should use parentheses to make sure it is classified as joined
	* New code blocks can only begin after a statement that ends with a colon.
  5.7 While Loops
	* While loops: executes a block of code as long as the expression is true
	* Loop body is what the loop executes on true
	* Infinite loops are when a loop continues indefinately.  It is best to avoid such loops
	* It is best in loops to use the greater than or less than sign with the equal not just use ==.
	* In a loop if using just == it might blow right by without ever equaling the value
  5.8 More While Examples
	* No notes, it was just examples
  5.9 For Loops
	* For loops loops a specified number of times and can be used to print out everything in a list
	* Reversed() can be used to loop the a sequence backwards
  5.10 Counting Using the Range() Function
	* Range() will generate a sequence of numbers based on the range indicated.  example range (10,13) gives 10 11 12.
	* Range(start number, end before numer, number to count up by)
Chapter 6: Functions
  6.1 Function Basics
	* Function: named series of statements
	* Function call: invoking a function's name
	* Function types: input(), int(), type(), etc
	* New functions can be created using def keyword
	* Fuctions consists: def keywork, fuction name, and a block of statements
	* Return: when it gets to the return the program jumps back to the next statement after the function call
	* Function names should be lowercase with underscores seperating words
  6.2 Function Parameters
	* Parameters: help to influence an functions behavior
	* Parameters are normally in () when defining the function, multiple parameters are seperated by commas
	* Parameters can not be an expression
	* Function call paramters can be expressions
  6.3 Returning Values from Functions
	* Return statement can product one output value
	* Function without a return statement returns none
	* Hierarchial function calls or nested fuction calls are calls that happen inside another call
  6.4 Dynamic Typing
	* Any type of object can be passed into a function

	* Polymorphism: behavior of the function depends on the argumement types
	* Dynamic typing is used to determine the type of objects so the program will execute properly
	* Static typing makes the programmer define each type of objects
  6.5 Function with Branches/Loops
	* Function blocks may include branches, loops, and other statements
  6.6 Functions are objects
	* Functions have type, identity, and value
	* Bytecode represents the statements to be excuteds by the function
		- Low-level operation and one statement can contain multiple bytecodes
		- Can consist of adding, subtracting or loading from memory
	* Calling a function is the same is calling the item.  print_face() is the same as func = print_face
	* Function objects don't support most operators
	* You can use a function inside another function.  This can be used to pass the return value of one function into the second function
  6.7 Scope of Variables and Functions
	* Name of a variable or function object is not visable to the entire program.  This is know as the object's scope.
		- Variable scope created inside a function is only seen inside the function.  It can not be used outside 
		- These are called local variables
		- Extends from the variable's assignment to the end of the function
	* Variables defined outside the function can be used anywhere in the program.  They are called global variables
	* Global statements are required to change a global variable inside a function.  Example: global employee_name is used inside the function
	* Inside a function the local variable takes presidence over the global variable of the same name.  Makes the global variable unreachable
	* Good practice, avoid non-constant global variables
  6.8 Namespaces and Scope Resolution
	* namespace: maps names to objects
		- It is a normal python dictionary
	* Scope: area of code where a name is visiable
		- Built-in scope: built-in names of Python, examples: int(), str(), etc
		- Global scope: globally defined names
		- Local scope: scope within currently executing fuction.  Locally defined names
	* Order of locating a name: Local scope first, then global, and last in built-in scope
	* NameError is when a name is not found in any of those
	* Scope resolution is the processes of searching for a name.
	* Local namespace is removed at the end of the function
  6.9 Function Arguments
	* Pass by assignment: arguments are passed by object reference
	* Objects are either immutable or mutable depending on if they can be changed
	* To make sure a function does not change a immutable object at all, then a copy of said object is used.
Chapter 7: Classes
  7.1 Classes: Introduction
	* Classes are a higher level view to make a programs smaller details make more sense
	* Classes group related items
  7.2 Classes: Grouping Data
	* The object created by creating a class maintains a set of attributes.
	* Attribute Reference Operator: can be accessed using
	* Instantiation operation is performed by calling the class.  This creates an instance.
	* For class names use the hump nameing method.  LunchMenu, CoinAmounts, etc
	* Self: Method parameter for the class instance
	* Instance: instantiation of a class
	* __init__ : constructor method initializes a class instance.  Called automatically
	* Class: group of related variables and functions
	* Attribute: name following a "." symbol
  7.3 Class Methods
	* Method: function defined within a class
	* Method object: an attribute of a class.  References using dot notation
	* Special method name: method implements some special behavior of the class
	* Special methods are identified by double underscores before and after an identifier
	* Good practice:  Do not use double underscores for anything other then special methods
	* When setting the first paramenter of a method it has to be (self) because it will throw an error otherwise
  7.4 Class and Instance Object Types
	* User defined classes contain 2 types of objects: class objects and instance objects
		- Class object: creates instance objects
		- Instance object is initialized by the __init__ method
	* Initiating a class
		- class Time:
			def __init__(self):
				self.hours = 0
				self.minutes = 0
	* To initiate an instance
		time1 = Time()       ** first instance is set with the class
		time1.hours = 5      ** first attribute for this instance and it is set
		time1.minutes = 30   ** second attribute for this instance and it is set
	* Same setup for other instances
	* Class and instance objects are namespaces and are used to group data and functions together
	* Class attribute: shared amongst all of the instances of that class.  They are also defined within the scope of the class
	* Instance attribute can be unigue to each instance
		- Instance attributes are created using dot notation when printing or calling the attribute
  7.5 Class Constructors
	* Class instances initialized to a specific state
	* Additional parameters besides self can be added to a class constructor
  7.6 Class Interfaces
	* Class Interface: methods that programmers call to create, modify or access a class instance.
		- print_time() and print_pace() are examples of methods used by a programmer to access the class instance
	* Abstract data type (ADT): data type whoses creation and update are constrained to specific well-defined operations
	* Abstraction helps users focus on higher level concepts by hiding a lot of the fiddly bits
  7.7 Class Customization
	* Class customization: process of identifying how a class should behave for some common operations
		- Special method names are used to implement this
		- They normally start and end with 2 underlines __
	* Operator Overloading: redefining the functionality of built-in operators, in class instances
  7.8 Memory Allocation and Garbage Collection
	* Memory Allocation: Process of requesting and being granted memory
	* The operating system must grant access to the application
	* Garbage Collectiion: Objects are deallocated by python.  It can be deallocated when it does not reference any variables
	* Reference count: integer counter that keep track of how many variables reference an object
	* The Garbage collector deallocates objects that the reference count is 0 on
	* 
Chapter 8 Lists and Dictionaries
  8.1 Lists
	* List: A container which groupes related objects together
		- A list is sequenced
		- Maintain a left-to-right ordering
		- List elements are accessed using indexing operations.
		- List elements have brackets around them
	* List() function accepts a string, list or tuple and returns a new list object
	* Index: integer corresponding to the elements location in the list.
	* A list is Mutable and has the capability of in-place modification
  8.2 Iterating Over a List
	* List methods can be used to add and remove things from a list
	* Enumerate(): Build in function. 

Notes about posting
	MyPC@DAWN-TOWER MINGW64 ~/desktop/GitProjects (main)
	$ git add *

	MyPC@DAWN-TOWER MINGW64 ~/desktop/GitProjects (main)
	$ git commit -m "Notes added through Chapter 7.8"

	MyPC@DAWN-TOWER MINGW64 ~/desktop/GitProjects (main)
	$ git push -u origin

  8.3 List Nesting
	* List nesting: where a list is an element of another list.
	* Multi-demensional data structure can be made using this like a 2D table.
	* Nested for loops can be used to access elements of nested lists
		- the outer loop goes through the rows (which is the elements of the main list)
		- the inner loop goes through each list elements of the main list
  8.4 List Slicing
	* Slice notation: read multiple elements from a list
	* This will make a new list with only the elements that were indicated.  The 1st # is the start and the End is End before here
	* Stride: indicates how many elements are skipped between extracted items.
		- This is if you want every other elements of the list
  8.5 Loops Modifying Lists
	* Common error for loops with lists is that people forget to use the position when writing the code.
	* You must always have the position you are referencing and changing.
	* When making modifications, especially deleting, it is better to use a copy of the list
  8.6 List Comprehensions
	* List comprehension: iterates over a list and modifies the entire list and returns the new list.
	* New list name = [(i -/+ or what ever change) for i in my_list] is how you make changes
	* List comprehension creates a new list, where for loops modify an existing list
  8.7 Dictionaries
	* Dictionary when it comes to python is another type of container object
	* Dictionaries reference objects as key-value pairs.  Key : Value
	* Dictionaires us the dict type
	* Wrap in braces { } or us dict() function to create a dictionary
	* Dictionaries are mutable
  8.8 Dictionary Methods
	* Dict method: function that operates specifically on the dict object
	* These functions are clear, get, update, pop
  8.9 Iterating Over a Dictionary
	* Loops can be used to interate over a dictionary
	* Hash is a key that helps the interpreter do fast look ups
	* Dict.items() lists everything, dict.keys() lists only keys, and dict.values() lists only values
  8.10 Dictionary Nesting
	* Dictionaries like Lists can be nested.
	* Data structure: method of organizing data
Chapter 9 Recursion
  9.1 Recursive Functions
	* Recursive functions are when a function calls itself
	* Recursive functions work well when needing to count down within a loop
  9.2 Recursive Algorithm: Search
	* Recursive algorithm can be used to do things like find numbers or names by calling the function until it is found
  9.3 Adding Output Statements for Debugging
	* While programming, programmers will use output statements to make sure the program is outputing correctly.
	* When the output statement for debugging is not needed the programmers will comment them out
  9.4 Creating a Recursive Function
	* 2 steps for creating a recursive function
		- Write a base case: returns a value without doing a recursive call
		- Write a recursive case:
	* Before writing a recursive fuction: 1. does it have a naturally recursive solution and 2. solution is better than a non recursive solution
	* Recursive functions have to reach a base case so it does not go into infinite recursion
  9.5 Recursive Math Functions
	* The fibonacci sequence is a good option for using recursive functions
	* The greatest common divisor can also be calculated using recursive functions
	* Depth of recursion measures how many recursive calls have been made. 1000 being the depth limit
  9.6 Recursive Exploration of All Possibilities
	* Trees are used in recursive exploration
Chapter 10 Algorithm Analysis
  10.1 Constant Time Operations
	* Efficient algorithms aims to lower the time the algorithm runs while also doing what needs to be done
	* Constant time operations always take the same amount of time to complete for a given processor
	* Constant time operations seem to focus on fixed size data values and using mathmatical formulas (add, subtracting, and comparision)
  10.2 Algorithm Efficiency
	* Algorithm efficiency is measured by the computational complexity of the algorithm.
	* You want to avoid using algorithms that have a lot of complexity and use a lot of resources
	* Runtime Complexity is a function and does vary a little based on input data
		- When using this for tests it is best to do the worse and best case scenarios to get a true look at what is going on
	* Space complexity is a function and is representative of fixed-size memory units
  10.3 Growth of Functions and Complexity
	* Runtime complexity has a lower bound and an upper bound, which provides a general picture of runtime
  10.4 O Notation
	* Big O notation: mathematical way of describing how a function generally behaves
	* Need to review this more.  Probably using other resources
  10.5 Algorithm Analysis
	* Run time analysis often focuses on worst case
	* Will need to research this as well with more instruction
	* In the Big O notation constants are omitted because they are not needed.  This includes precisely counting
	* Runtime analysis for nested loops requires summing the runtime of the inner loop over each outer loop iteration.
  10.6 Recursive Definitions
	* Algorithm is a sequence of steps while a recursive algorithm breaks the problem into smaller problems and run the algorithm to solve those
	* Recursive algorithms can not be endlessly divided into smaller problems, it muse have a base case
		- This base case can be in the form of the if statement where the recursive algorithm can be in the form of the else statement
	* Recursive Function: function that calls itself
	* Base case does not work as an error checking.  A reverse list can still attempt to access the list out of bounds of the list.
  10.7 Recursive Algorithms
	* Fibonacci sequence: each number is the sum of the previous 2 numbers in the sequence.
	* Recursive Algorithms can be used to calculate the fibonacci sequence
	* Recursive binary search
		- Algorithm that searches a sorted list for a key starting with the middle of the list and working middles and if the guessed number is high or low
		- This narrows down the guesses until the correct key is found if it is there
  10.8 Analysing the Time Complexity of Recursive Algorithms
	* Recurrenct Relations
		- Has a T on both sides of the equation
	* More stuff I do not understand
	* Recursion Trees
		- Visual diagram of a operations done by a recursive function
Chapter 11 Searching and Sorting Algorithms
  11.1 Searching and Algorithms
	* Linear search: algorithm that searches for a key from the beginning of the list until either it is found or the end is reached
	* To find how long a search would take: time each item takes * the number of items(for max)/1 (for min)
  11.2 Binary Search
	* Binary Search is faster then Linear search and it checks the middle of the list and uses high and low to repeat until item is found or not found
	* The maximum steps to figure out an item is not on the list using Binary search is 6
  11.3 Python: Linear and Binary Search
	* In the binary search you find the mid by adding the high and the low and dividing by 2.  the you either go high or low depending and do it again unti found.
	* Binary searches need to have the list in order to be functional
  11.4 Sorting Introduction
	* Sorting: process of converting a list of elements into an order
  11.5 Selection Sort
	* Selection Sort: algorithm that treats input as 2 parts, sorted and unsorted.  Selects the proper next value to move from unsorted to sorted
  11.6 Python: Selection Sort
	* 

Review After Pre-assessment
  Garbage Collection
	* Deleting unused Objects and Variables
	* Things stay in memory as long as they are referenced or in scope.  If they are no longer reference or in scope they get deleted
  Data Categories
	* Lists
		- General Purpose
		- Most widely used data structure and can grow or shrink as needed
		- Sequence type and is sortable
	* Tuple
		- Immutable: can not be changed which makes them usefor for fixed data
		- They are normally faster than lists
		- Also a sequence type
	* Set
		- Store non-duplicate items
		- Very fast access compared to lists
		- unordered
		- Math Set ops: union and intersect, 
	* Dict (Dictionary)
		- Key/Value pairs
		- Associative array
		- Unordered
	* These can hold any datatype
	* Sequence
		- Indexing: can asscess any item in the sequece using its indexes
		- Slicing: slice out substrings, sublists, etc
		- Adding and Concatenating using the + sign.  Multiplying can also be used
		- Checking: using in or not in
		- Iterating can me used as a for loop	
		- Can find the minimum, maximum, and number of items
		- Sorting: returns a new list of items in sorted order
		- Index (item) will return the first occurrance of an item
  Heap (Min)
	* Heaps are a data tree format
	* inserting into the heap is top to bottom left to right.  Example (5,3,5,9,1,45,8,3)
		- 		5
			    3	   5
			 9   1   45  8
		       3
	* Heap uses bubble sorting, which compares a spot with its parent and if it is not in the right spot it will swap with its parent
		- Example: the smallest value in the heap is always at the top of the heap.  So the number 1 with compare with its parent, the 3,
			since one is smaller they will swap spots.  Then one will be compared to its new parent, number 5, and since 1 is smaller
			then those will switch as well.  Now one is the smallest number and is at the top of the heap
	* A min heap will make sure that the parents of each child is smaller then the child.  If the parent is larger then bubble sorting takes effect
  Sorting
	* Bubble sorting is comparing 2 numbers and pushing the largers number to the end while bringing the smallest number to the beginning
		- This is done by comparing 2 numbers in an array and if the 1st number is bigger then the second number, they get swapped
	* Quick sort using a pivot point to compare values to and sorts based on if they are higher or lower then pivot point.  
		Then takes the high and low sections seperately to do the same thing until everthing is sorted.
	* Insertion sort can use 2 arrays, an unsorted and a sorted array.  Then you go through the unsorted array and put it in the sorted array in order
		- The big thing with insertion sort is that it will shift items to the right to open space for smaller items. 
		- The value you are currently sorting you will put it into a value so we do not lose it, so we use a current value to put this in.
		- Time for this best case is O(n) and worst case is O(n^2)
	* Selection Sort searches for the minium value and puts it at the end of the sorted part of the list
		- This has smaller swaps then doing a bubble sort
  Data Structures and Algorithms
	* Data structures: a data storage format that enables efficient access and modification
	* Algorithms: unambiguous, finite, sequence of instrutions to solve a problem
	* BigO notation: N is the input
  Reviewing questions
	* To figure out what the modulo (%) is you divide then you multiple by the whole number and subtract that from the larger number
		-example: key%1009 number 2023.  Divide 2023/1009.  Then: Drop the decimal and take the 2 * 1009 = 2018.  Then take 2023-2018=5 which is the remainder
	* Hash function is how you know what slot the data will be stored in
	* 

PASSED TEST