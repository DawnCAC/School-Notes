Notes with Teacher

* Watch for the welcome email
* Make a reading plan for the 16 sections
* This looks to be in python
* Average is 4 or 5 weeks for this course
* Send an email to teacher if there is something I really do not understand
* Use the study guide to help with knowing what to study.
* Watch course chatter for any student notes on this class.
* The class reviews structures and the commands to come with them

Course Plan
___________
Section 1: Getting started
	1.1-1.5: 7/13/21
Section 2: Introduction to Python 3
	2.1-2.6: 7/14/21 - 7/15/21
	2.7-2.12: 7/15/21 - 7/16/21
Section 3: ADTs and Algorithms
	3.1-3.7: 7/17/21
Section 4: Types, Variables, & Expressions
	4.1-4.5: 7/18/21-7/19/21
	4.6-4.10: 7/20/21
Section 5: Branches and Loops
	5.1-5.5: 7/21/21-7/22/21
	5.6-5.10: 7/23/21-7/24/21
After I finish this section look at my planning and plan out the rest.
Section 6: Functions
Section 7: Classes
Section 8: Lists and Dictionaries
Section 9: Recursion
Section 10: Algorithm Analysis
Section 11: Searching and Sorting Algorithms
Section 12: Lists, Stacks, and Queues
Section 13: Hash Tables
Section 14: Trees
Section 15: Heaps
Section 16: Final Steps

Live EVENT 7/18/21: Implementation of Stack ADT Based Upon a Python List
	* IDE: Integrated Developement Environment
	* Stack is an abstract data type
		- Lists in python are used to make a stack
		- Alter and transfore the lists operations
	* Operations for a stack: Push and pop
	* Last one in the stack is the first item out.
	* Push puts an item on the stack as long as the stack is not full, it amends it to the list
	* Pop removes an item from the stack as long as the stack is not empty, will take the item out of the list
	* Stacks full and empty is defined at the type of the program
	* Peek lets you look at the top item in the stack
	* Object oriented stack
		- The init sents all of the values for a stack
		- def __init__(self, size = 10):
			self.S_Size = size
			self.S_Empty = 0
			self.S = ()
		- getCapacity will let you know how big the stack currently is.
	* Abstract data type can be any type of real world object that is being modeled.  These types are showing real world data types.
	* Need to make sure I can really understand the data algorithms and algorithms because it will help really know how to program.  Learn as much as I can.
	* Taxominy: 
	* I have python installed and go to the course in the lists, stacks, and queues, understand python stacks and queues.  Copy the implementation into python and play with it.
	* I may want to pull all the python code as I go and try to play with it and see how it works.
	* Breaking things is not a bad thing it will help learn.

Chapter 1: Getting Started
  1.1
	* Covers fundamentals of dynamic data structures
	* Python software is the bases
	* Covers object-oriented design and abstract data types as a design paradigm
  1.2
	* Python Code Commenting Style Requirements
	* For inline comments use # and a space, then add your comment 
	* # and a space can be used for multi-line comments by putting them at the front of each line
	* Last is using 3 quote marks “”” on each side of the quote.  These are usually for describing what a piece of code does.
	* Use a style guide to help guide your code style


  1.4
  Pacing guide
	Week 1: Chapters 2-4
	Week 2: Chapters 5-7
	Week 3: Chapters 8-10
	Week 4: Chapters 11 & 12
	Week 5: Chapters 13-15
	Week 6: Pre assessment, study, and Objective assessment
  Look at this for figuring out my chapters.

1.5 Learning Objectives Content Map (Coaching Guide)
	Use this to make sure I know everything on here



Chapter 2: Introduction to Python 3
  2.1 Programming Introduction
	* Computer Program consists of instructions that a computer executes like instructions used to execute a recipe
  2.2 Computational Thinking
	* Task Decomposition means to reduce the complex task into simpler basic steps to make everything easier to solve.
	* Computational thinking: creating an algorithm to solve a problem by evaluating the problems most basic parts
  2.3 The Python Interactive Interpreter
	* Interactive Interpreter: Program that allows the user to execute one line of code at a time.
		- Code is a common word for textual representation of a program
		- Line is a row of text
		- Prompt is displayed and indicates the interpreter is ready to accept code.  In python it is >>> for the prompt
  2.4 Programming in Python
	* Programmer can write a python code file and provide the file to the interpreter.  This allows the program to not have to be typed in line by line each time.
		- Statement: Program instruction
		- Expressions: code that return a value when evealuated
		- Print(): displays variables or expression values
		- '#' denotes comments
  2.5 Basic Output
	* Primary way to print an output is using print()
	* End= : keeps the next print's output on the same line separated by a single space
	* Using commas between items to print will print them in a line seperated by spaces Example: wage = 20 Print ('Wage:',wage) = Wage: 20
	* \n is a newline character.  It will seperate out things into seperate lines
	* 
  2.6 Basic Input
	* input() is used for a user to enter a value.  input waits for the user to insert something and hit enter key
	* inputs are strings normally
	* sting and integer values are considered types
  2.7 Errors
	* Syntax error: violate a programming language's rules on how symbols can be combined to create a program
		- Error message will include the line around where the error is
	* It is good practice to write a little bit of code at a time and run it.  This will help lessen the number of stacking errors
	* Runtime error: program's sytax maybe correct but not all the coding maybe correct.  This may crash your program.
	* Logix error: when the program has errors that will not crash the program but make the program not behave like it is suppose too.  Often called a bug.
  2.9 Development Environment
	* IDE: Integrated Development Environment is used to develope code
	* Python can be written in notepad as well.  You do not need an IDE for python
  2.10 Computers and Programs
	* Memory stores 0s and 1s or bits
	* Program/Application/App: sequence of instructions that are designed by a programmer
	* Program instructions written in 0s and 1s is machine instructions or machine code
	* Assemblers are what translates human readable instructions into machine code
  2.11 Computer Tour
	* Computer was originally a person who did computations by hand from there it has advanced into tech that is called computers which include large computers
	   and as small as a smart phone
	* Parts of a computer: Input/output devices (screen/keyboard/mouse), Storage, Memory, Processor, clock
	* Computers can now run multiple programs at a time
  2.12 Language History
	* Machine Language: made up of 0s and 1s and is the executable program with machine instructions
	* Assembly Language: assemplers translate human readable instructions to machine language
	* High-level languages: support programming using algorithms and formulas.  More closely related to how people think.  Need compilers
	* Scripting language: executes programs without a compiler, they use an interpreter instead

Chapter 3: ADTs and Algorithms
  3.1 Introduction to Algorithms
	* Algorithm: Describes a sequence of steps to do a calculation.
	* Computational Problem: Input, question about input, and desired output
	* Algorithm can be in english, pseudocode, programming language, etc.  The algorithm just has to precisely describe the computational procedure.
	* NP-complete: problems for which no know efficient algorthm exists.  For this programmers need to focus on finding a good enough algorithm
  3.2 Data Structures
	* Data Structures: way of organizing and storing data.  It also makes it so operations can be performed on the data
		- Record: stores subitems with an name for each
		- Array: stores an ordered list of items.  Accessible by positional index
		- Linked list: stores ordered list of items using nodes.  Has a pointer for the next node
		- Binary tree: each node stores data and has up to 2 children, similar to a family tree
		- Hash table: sotres unordered items by mapping the location in an array
		- Heap: tree that maintains simple property that the node key is either greater thank or less than/equal to the node's childrens' keys.
		    Either max-heap or min-heap
		- Graph: representing connections among items.  vertex: item on graph.  Edge: connection between 2 vertices
	* An array has to be shifted to add a new item while a linked list can add an item by updating the pointers
  3.3 Relation Between Data Structures and Algorithms
	* Review the Programing part of this section
  3.4 Abstract Data Types
	* Abstract data types (ADTs): predefined user operations
	* Different underlying structures will require different algorithms be performed.
	* Common Abstract data types: list, stack, queue, deque, bag, set, priority queue, dictionary(map)
  3.5 List Abstract Data Type (ADT)
	* List: holding ordered data
  3.6 Queue Abstract Data Type (ADT)
	* Queue: items are inserted at the end and remove from the front.  First in first out.
	* Pop: Removes and returns the item in the from of the queue
  3.7 Applications of ADTs
	* Abstract: have users interact at a high level with an items but internal details are hidden.
	* Underlying implemention needs to be known to make sure that the runtime is efficient
	* ADTs in standard libraries: Python (list, set, dict, deque), C++ (vector, list, deque, queue, stack, set, map), Java (Collection, set, list, map, queue, deque)
	* 

Chapter 4: Types, Variables, & Expressions
  4.1 Objects and Variables
	* An interpreter creates and manipulates objects as needed.
	* Variable is used to remember a value for later use and is deleted after use
  4.2 Assignments
	* Variable name is what a programmer calls a variable.
	* Assignment statement: assigns the name on the left and the value associated with that name on the right
	* Name = expression (which can just be one item or it can be a calculation)
	* Names can be reassigned to another object, they are not perminate
	* In programming = means compute the value on the right and assign it to the left
  4.3 More on Objects
	* Python objects include: value, type (like integer or string), and identity (unique identifier that describes the object)
	* Objects that are integers can be added or multipled but strings can not be.  Strings can be appended with additional text.  This is because type matters to a
	   values behavior
	* type() prints the type of object
  4.4 Names
 	* Name is also called the identifier
		- Sequence of letters and numbers and underscore.
		- Must always start with a letter and an underscore is considered a letter in this case
		- Double underscores should be avoided because python has special usages for this
	* Python is case sensitive
	* Reserved words, or key words, can not be used as names because they are part of the coding language
	* Good practice is to use all lowercase when naming and use Underscores between words
	* Names should be meaningful and have something to do with what it is being used for.  Like num_cars for the number of cars in the lot, etc
	* While meaningful, names should not be particularly long either.
  4.5 Numeric Types: Floating-Point
	* Floating points are a type of decimal/fraction
	* When needing things to be floating points a decimal has to be used in the programing
	* Floating point literal using scientific notation using e before the exponent so those calculations can be used.
	* overflow error happens when the value is too large to be stored into memory.  Max: 1.8x10e308 and min: 2.3x10e-308.
	* floating points are usually used for values that are measured such a volume or temp
  4.6 Expressions
	* Expression: combination of items for example variables and operators that evaluates to a value
	* Literal: specific value in the code
	* Expressions can be just a literal or variable or any compination of those and operators, just with no commas
	* Operator: symbol to use for calculation.  Like + for addition
	* Expressions must follow arithmetic rules
	* Can not ommit operators like you can in math.  For example in math 5k is 5*k but in programming 5k is just 5k, if you want to multiple you have to have the *.
	* No factoial operator exists in python
	* // is used to divide if you do not want a floating point.  The remainder is just dropped instead of added as a decimal
	* % or modulo is used to return just the remainder of a division
	* If either value is a float then the result will be a float.  Division always returns a float
  4.7 String Basics
	* String: sequence of characters.  Like someones name
	* String literal: string value specified in the source code.  Do so my suround the string with quotes single or double
	* Sequence type: type that specifies a collection of objects ordered from left to right.
	* Index: position of a character in the string
	* len() is used to find the length of a string
	* Use [index # you want] to access specific indexes
	* Strings once made can not be modified.  To change the string you have to assign the string again with the modifications already changed
	* 
  4.8 Lists Basics
	* Containers: contain references to other objects
	* List: is a type of container. Use brackets to suround the sequence of variables
	* List item is called an element
	* Lists are ordered by the position in the list, they have an index #
	* Lists can help reduce variables in a program
	* Lists index must be an integer but can be negative
	* Lists can be modified as needed by the programmer by using append() or pop() or remove()
	* Sequence-type functions perform operations on lists and strings
	* Tuple is an imuutable list.  It can not be modified once produced.  Uses () instead of []
  4.9 Dictionary Basics
	* Dictionary: is a container that describes associative relationships
	* Key: is like the word cat from the english dictionary
	* Value: describes some data associated with the key
	* The object type is dict. and it is created by using braces {} the dictionary
	* Multiple entries can be maded into the dictionary {entry 1: value, entry 2: value, etc}
	* Dictionaries are used if you need to associate a key to a value in a list.  like a students name with their grade
	* Dictionaries do not maintain an order and can be changed as necessary
	* Insert by dict[key] = value, use the same thing to update as well, use the same key but add a different value.
	* del dict[key of entry to be deleted]
	* KeyError occurs if the key does not exist
  4.10 Common Data Types Summary
	* Numeric types: int and float
	* Sequence types: string, list, and tuple
	* Mapping type: dictionary

Chapter 5: Branches and Loops
  5.1 If-Else Statement
	* If-else statements use branching to have the program execute either one group of statements or another
	* I am already ok at if-else statements, did not take much notes here
  5.2 Relational and Equality Operators
	* Relational Operators: are like less than or greater than
	* Equality Operators: are like equal to and not equal to
	* Each evaluates to a boolean which is true or false
	* Operator chaining is supported in python.  Chaining performs comparisons from left to right.
	* Numbers are arithmetically compared.  Strings are compared by converting to ASCII
  5.3 Multiple if-else
	* Else if is used if you need to run multiple if else statements
	* It is good practice to use for example <= instead of just less than
  5.4 Boolean Operators and Expressions
	* Boolean refers to a value that is true or false
	* Boolean operator can combine multiple expressions
	* Expression using boolean operators is known as a boolean expression
	* boolean operators: and, or, not
	* Use parentheses to make sure the order of operations is inacted correctly
	* Relational operators such as == compute before logical operations like not
  5.5 Membership Operators
	* 

